// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebServer.Logic;

#nullable disable

namespace WebServer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241028174902_Database")]
    partial class Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebServer.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<string>("Token")
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("ID");

                    b.ToTable("account");
                });

            modelBuilder.Entity("WebServer.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Assign_at")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assign_at");

                    b.Property<Guid>("ComputerUUID")
                        .HasColumnType("char(36)")
                        .HasColumnName("computer_uuid");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.HasKey("Id");

                    b.HasIndex("ComputerUUID");

                    b.HasIndex("JobId");

                    b.ToTable("assignment");
                });

            modelBuilder.Entity("WebServer.Models.Computer", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("uuid");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("UUID");

                    b.ToTable("computer");
                });

            modelBuilder.Entity("WebServer.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("method")
                        .HasAnnotation("Relational:JsonPropertyName", "method");

                    b.Property<int>("RetentionCount")
                        .HasColumnType("int")
                        .HasColumnName("retention_count");

                    b.Property<int>("RetentionSize")
                        .HasColumnType("int")
                        .HasColumnName("retention_size");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("timing")
                        .HasAnnotation("Relational:JsonPropertyName", "timing");

                    b.HasKey("Id");

                    b.ToTable("job");
                });

            modelBuilder.Entity("WebServer.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<Guid>("UUID")
                        .HasColumnType("char(36)")
                        .HasColumnName("computer_uuid");

                    b.HasKey("Id");

                    b.ToTable("report");
                });

            modelBuilder.Entity("WebServer.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("directory");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("source");

                    b.HasAnnotation("Relational:JsonPropertyName", "sources");
                });

            modelBuilder.Entity("WebServer.Models.Target", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("directory");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("target");

                    b.HasAnnotation("Relational:JsonPropertyName", "targets");
                });

            modelBuilder.Entity("WebServer.Models.Assignment", b =>
                {
                    b.HasOne("WebServer.Models.Computer", "Computer")
                        .WithMany()
                        .HasForeignKey("ComputerUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebServer.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("WebServer.Models.Source", b =>
                {
                    b.HasOne("WebServer.Models.Job", null)
                        .WithMany("Sources")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebServer.Models.Target", b =>
                {
                    b.HasOne("WebServer.Models.Job", null)
                        .WithMany("Targets")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebServer.Models.Job", b =>
                {
                    b.Navigation("Sources");

                    b.Navigation("Targets");
                });
#pragma warning restore 612, 618
        }
    }
}
